lambda: |-
  // Map weather states to MDI characters.
  #include <string>

  std::map<std::string, std::string> weather_icon_map
    {
      {"cloudy", "\U000F0590"},
      {"cloudy-alert", "\U000F0F2F"},
      {"cloudy-arrow-right", "\U000F0E6E"},
      {"fog", "\U000F0591"},
      {"hail", "\U000F0592"},
      {"hazy", "\U000F0F30"},
      {"hurricane", "\U000F0898"},
      {"lightning", "\U000F0593"},
      {"lightning-rainy", "\U000F067E"},
      {"night", "\U000F0594"},
      {"clear-night", "\U000F0594"},
      {"night-partly-cloudy", "\U000F0F31"},
      {"partlycloudy", "\U000F0595"},
      {"partly-lightning", "\U000F0F32"},
      {"partly-rainy", "\U000F0F33"},
      {"partly-snowy", "\U000F0F34"},
      {"partly-snowy-rainy", "\U000F0F35"},
      {"pouring", "\U000F0596"},
      {"rainy", "\U000F0597"},
      {"snowy", "\U000F0598"},
      {"snowy-heavy", "\U000F0F36"},
      {"snowy-rainy", "\U000F067F"},
      {"sunny", "\U000F0599"},
      {"sunny-alert", "\U000F0F37"},
      {"sunny-off", "\U000F14E4"},
      {"sunset", "\U000F059A"},
      {"sunset-down", "\U000F059B"},
      {"sunset-up", "\U000F059C"},
      {"tornado", "\U000F0F38"},
      {"windy", "\U000F059D"},
      {"windy-variant", "\U000F059E"},
      {"calendar","\U000F00ED"}
    };

  std::map<std::string, std::string> various_icons
    {
      {"calendar","\U000F00ED"},
      {"icon-wifi","\U000F05A9"},
      {"vehicle","\U000F010B"},
    };

  it.fill(COLOR_ON);

  std::string fam_lbl = std::string("Family:");
  const auto personal_lbl = std::string("PERSON:");
  auto event_1 = std::string(id(cal_event_1).state);
  auto event_2 = std::string(id(cal_event_2).state);
  auto event_3 = std::string(id(cal_event_3).state);
  auto event_4 = std::string(id(cal_event_4).state);

  auto event_1_color = RED;
  auto event_2_color = RED;
  auto event_3_color = RED;
  auto event_4_color = RED;

  if (event_1.find(fam_lbl) != std::string::npos) {
      event_1_color = Color::BLACK;
  }

  if (event_2.find(fam_lbl) != std::string::npos) {
      event_2_color = Color::BLACK;
  }

  if (event_3.find(fam_lbl) != std::string::npos) {
      event_3_color = Color::BLACK;
  }

  if (event_4.find(fam_lbl) != std::string::npos) {
      event_4_color = Color::BLACK;
  }

  // Weather Section
  it.printf(240, 5, id(font_google_bold_medium), Color::BLACK, TextAlign::TOP_CENTER, "%s", id(current_time).state.c_str());

  it.printf(255, 56, id(font_mdi_medium_large), RED, TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
  it.printf(245, 50, id(font_google_bold_large), RED, TextAlign::TOP_RIGHT, "%2.0fÂ°", id(weather_temperature).state);

  // Event Section
  it.printf(130, 133, id(font_mdi_medium_large), RED, TextAlign::TOP_RIGHT, "%s", various_icons["calendar"].c_str());
  it.printf(260, 125, id(font_google_bold_large), RED, TextAlign::TOP_CENTER, "%s", "CALENDAR");

  it.printf(110, 190, id(font_google_bold_small), event_1_color, TextAlign::TOP_LEFT, "%s", id(cal_event_1).state.c_str());
  it.printf(130, 210, id(font_google_regular_small), event_1_color, TextAlign::TOP_LEFT, "%s", id(cal_event_1_message).state.c_str());

  it.printf(110, 235, id(font_google_bold_small), event_2_color, TextAlign::TOP_LEFT, "%s", id(cal_event_2).state.c_str());
  it.printf(130, 255, id(font_google_regular_small), event_2_color, TextAlign::TOP_LEFT, "%s", id(cal_event_2_message).state.c_str());

  it.printf(110, 280, id(font_google_bold_small), event_3_color, TextAlign::TOP_LEFT, "%s", id(cal_event_3).state.c_str());
  it.printf(130, 300, id(font_google_regular_small), event_3_color, TextAlign::TOP_LEFT, "%s", id(cal_event_3_message).state.c_str());

  it.printf(110, 325, id(font_google_bold_small), event_4_color, TextAlign::TOP_LEFT, "%s", id(cal_event_4).state.c_str());
  it.printf(130, 345, id(font_google_regular_small), event_4_color, TextAlign::TOP_LEFT, "%s", id(cal_event_4_message).state.c_str());

  // Commute
  it.printf(135, 400, id(font_mdi_medium_large), RED, TextAlign::TOP_RIGHT, "%s", various_icons["vehicle"].c_str());
  it.print(260, 395, id(font_google_bold_large), RED, TextAlign::TOP_CENTER, "COMMUTE");

  it.print(225, 456, id(font_google_bold_medium), Color::BLACK, TextAlign::TOP_RIGHT, "MONICA");
  it.print(255, 456, id(font_google_bold_medium), Color::BLACK, TextAlign::TOP_LEFT, "MICHAEL");

  it.printf(225, 491, id(font_google_bold_medium), RED, TextAlign::TOP_RIGHT, "%s", id(PERSON_1_location).state.c_str());
  it.printf(255, 491, id(font_google_bold_medium), RED, TextAlign::TOP_LEFT, "%s", id(PERSON_2_location).state.c_str());      

  it.printf(225, 531, id(font_google_regular_med_large), RED, TextAlign::TOP_RIGHT, "%s", id(PERSON_1_commute).state.c_str());
  it.printf(255, 531, id(font_google_regular_med_large), RED, TextAlign::TOP_LEFT, "%s", id(PERSON_2_commute).state.c_str());

  it.printf(225, 563, id(font_google_regular_medium), Color::BLACK, TextAlign::TOP_RIGHT, id(PERSON_1_travel).state.c_str());
  it.printf(255, 563, id(font_google_regular_medium), Color::BLACK, TextAlign::TOP_LEFT, id(PERSON_2_travel).state.c_str());

  it.printf(225, 588, id(font_google_regular_small), RED, TextAlign::TOP_RIGHT, id(PERSON_1_route).state.c_str());
  it.printf(255, 588, id(font_google_regular_small), RED, TextAlign::TOP_LEFT, id(PERSON_2_route).state.c_str());

  //WiFi QR Code
  it.printf(190, 680, id(font_mdi_large), RED, TextAlign::TOP_CENTER, "%s", various_icons["icon-wifi"].c_str());
  it.image(260, 680, id(wifi_qr));